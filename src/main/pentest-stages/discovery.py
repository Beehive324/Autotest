from agents.recon_phase.enumerator import EnumeratorAgent
from typing import TypedDict, List
from langgraph.graph import StateGraph, START, END


class DiscoveryState(TypedDict):
    ip_address: str
    messages: List[str]



def _start_discovery(state: DiscoveryState):
    return {
        "ip_address": state.ip_address,
        "messages": state.messages
    }


def _discovery_agent(state: DiscoveryState):
    ip_address = state.ip_address
    messages = state.messages
    enumerator = EnumeratorAgent(model="ollama3.2")
    enumerator.run(ip_address)
    return {
        "ip_address": ip_address,
        "messages": messages
    }


workflow = StateGraph(DiscoveryState)

workflow.add_node(_start_discovery, "_start_discovery")
workflow.add_node(_discovery_agent, "_disovery_agent")

workflow.add_edge(START,"start_discovery")
workflow.add_edge("start_discovery", "discovery_agent")
workflow.add_edge("discovery_agent", END)





if __name__ == "__main__":
    graph = workflow.compile()
    state = graph.invoke({"ip_address": "192.168.1.1"})
    print(state)






